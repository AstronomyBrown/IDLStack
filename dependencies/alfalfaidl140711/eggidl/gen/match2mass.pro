PRO MATCH2MASS, ALFAFILE, TWOMASSFILE, OUTCAT

;+
;NAME:
;       MATCH2MASS
;
;PURPOSE:
;       To take an ALFALFA catalog and 2MASS catalog (from
;       read_alfalfacat and read_2mass, respectively) and create a
;       struture that matches 2mass sources to ALFALFA detections and
;       contains information from both.
;
;SYNTAX:
;       MATCH2MASS, alfalfacat, 2masscat, outcat
;
;INPUTS:
;       alfafile - the full pathname of an alfalfa catalog
;       twomassfile - the full pathname of a list of 2MASS sources
;                    found using a file generated by list_coords
;
;OUTPUTS:
;       outcat - The output structure that contains information from
;                both the ALFALFA and 2MASS catlogs.
;
;KEYWORDS:
;
;EXAMPLE:
;       match2mass, 'CR1_catalog.dat', 'twomass_sources.txt', matchedcat
;
;NOTES:
;       This procedure presumes that the input file of 2MASS sources
;       corresponds to the input ALFALFA catalog.  That is, the 2MASS
;       file comes for a GATOR query run on a coordinate list created
;       from the ALFALFA catalog using list_coords_2mass
;
;
;REVISION HISTORY:
;       Written B. Adams   July 2007
;       Revised B. Adams   August 2007 to take a more general input
;       file
;
;-


;Check the syntax
if n_params() lt 3 then begin
  print, 'syntax: match2mass, <alfafile>, <twomassfile>, outcat'
  print, '        Creates a matched catalog of ALFALFA and'
  print, '        2MASS detections.'
  return
endif

;Read the input files into structure

read_alfalfacat,alfafile,alfacat
read_2mass,twomassfile,twomasscat


;Figure out relevant sizes and create a dummy array to hold the values
;for the output catalog
nrow = n_elements(alfacat)
ncol = n_tags(alfacat) + n_tags(twomasscat) + 1
ind = n_tags(alfacat)
detections = intarr(nrow)


d = strarr(ncol,nrow)

for i=0,nrow-1 do begin
    j = where(alfacat[i].object eq twomasscat.objname_u, ct)
    detections[i] = ct
    d[ncol-1,i] = detections[i]
    for k=0,ind-1 do d[k,i] = alfacat[i].(k)
    if (ct eq 0) then for k=ind,ncol-2 do d[k,i]='-99'
    if (ct eq 1) then for k=ind,ncol-2 do d[k,i]=twomasscat[j].(k-ind)
    if (ct gt 1) then begin
        closest = min(twomasscat[j].dist_x,loc)
        h = j[loc]
        for k=ind,ncol-2 do d[k,i] = twomasscat[h].(k-ind)
    endif
endfor


;Move the tag names along and add in detections (separation is already
;included in twomass info)

colnames=strarr(ncol)
alfanames=tag_names(alfacat)
twomassnames=tag_names(twomasscat)
colnames=[alfanames,twomassnames,'detections']

;Create the structure
;Check tag names for data type

coln=strlowcase(colnames)

st = where(coln eq 'object' OR coln eq 'altname' OR coln eq 'hi_ra' OR coln eq 'hi_dec' OR coln eq 'opt_ra' $
           OR coln eq 'opt_dec' OR coln eq 'code' OR coln eq 'grid' OR coln eq 'objname_u' OR coln eq 'cys_u' $
           OR coln eq 'equinox_u' OR coln eq 'designation' OR coln eq 'cc_flg')
l = where(coln eq 'agc' OR coln eq 'dra' OR coln eq 'ddec' OR coln eq 'v50' or coln eq 'verr' OR coln eq 'w50' $
          OR coln eq 'werr' OR coln eq 'cntr_u' OR strpos(coln,'flg') ge 0 OR strpos(coln,'phi') ge 0 $
          OR coln eq 'detections')

j = where(st eq 0,stct)
k=where(l eq 0, lct)
if (stct gt 0) then cvalue='' else if (lct gt 0) then cvalue=-99L else cvalue=-99.

outcat = create_struct(colnames[0],cvalue)

for i=1,ncol-1 do begin
    j = where(st eq i, stct)
    k = where(l eq i, lct)
    if (stct gt 0) then cvalue='' else if (lct gt 0) then cvalue=-99LL else cvalue=-99.
    outcat = create_struct(outcat,colnames[i],cvalue)
endfor

outcat=replicate(outcat,nrow)

;Read the data into the structure


for i=0,ncol-1 do outcat.(i) = reform(d[i,*])


END
